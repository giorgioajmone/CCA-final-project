=== Generated schedule for mkCacheInterface ===

Method schedule
---------------
Method: sendReqData
Ready signal: (! is_halted) && cacheD.RDY_putFromProc
Conflict-free: sendReqInstr, halted, restarted, request, response
Sequenced before (restricted): getRespData, getRespInstr, halt, restart
Conflicts: sendReqData
 
Method: getRespData
Ready signal: (! is_halted) && cacheD.RDY_getToProc
Conflict-free: getRespInstr, halted, restarted
Sequenced before: halt, restart
Sequenced after (restricted): sendReqData, sendReqInstr, request, response
Conflicts: getRespData
 
Method: sendReqInstr
Ready signal: (! is_halted) && cacheI.RDY_putFromProc
Conflict-free: sendReqData, halted, restarted, request, response
Sequenced before (restricted): getRespData, getRespInstr, halt, restart
Conflicts: sendReqInstr
 
Method: getRespInstr
Ready signal: (! is_halted) && cacheI.RDY_getToProc
Conflict-free: getRespData, halted, restarted
Sequenced before: halt, restart
Sequenced after (restricted): sendReqData, sendReqInstr, request, response
Conflicts: getRespInstr
 
Method: halt
Ready signal: mainMem.RDY_halt &&
	      cacheI.RDY_halt && cacheD.RDY_halt && cacheL2.RDY_halt
Sequenced before (restricted): restart
Sequenced after: getRespData, getRespInstr, halted, restarted
Sequenced after (restricted): sendReqData, sendReqInstr, request, response
Conflicts: halt
 
Method: restart
Ready signal: mainMem.RDY_restart &&
	      cacheI.RDY_restart && cacheD.RDY_restart && cacheL2.RDY_restart
Sequenced after: getRespData, getRespInstr, halted, restarted
Sequenced after (restricted): sendReqData,
			      sendReqInstr,
			      halt,
			      request,
			      response
Conflicts: restart
 
Method: halted
Ready signal: mainMem.RDY_halted &&
	      cacheI.RDY_halted &&
	      cacheD.RDY_halted && cacheL2.RDY_halted && is_halted
Conflict-free: sendReqData,
	       getRespData,
	       sendReqInstr,
	       getRespInstr,
	       halted,
	       restarted,
	       request,
	       response
Sequenced before: halt, restart
 
Method: restarted
Ready signal: (! is_halted) &&
	      mainMem.RDY_restarted &&
	      cacheI.RDY_restarted &&
	      cacheD.RDY_restarted && cacheL2.RDY_restarted
Conflict-free: sendReqData,
	       getRespData,
	       sendReqInstr,
	       getRespInstr,
	       halted,
	       restarted,
	       request,
	       response
Sequenced before: halt, restart
 
Method: request
Ready signal: is_halted &&
	      cacheI.RDY_request &&
	      cacheD.RDY_request && cacheL2.RDY_request && mainMem.RDY_request
Conflict-free: sendReqData, sendReqInstr, halted, restarted
Sequenced before (restricted): getRespData,
			       getRespInstr,
			       halt,
			       restart,
			       response
Conflicts: request
 
Method: response
Ready signal: cacheI.RDY_response &&
	      cacheD.RDY_response &&
	      cacheL2.RDY_response && mainMem.RDY_response
Conflict-free: sendReqData, sendReqInstr, halted, restarted
Sequenced before (restricted): getRespData, getRespInstr, halt, restart
Sequenced after (restricted): request
Conflicts: response
 
Rule schedule
-------------
Rule: getFromMem
Predicate: mainMem.RDY_get && cacheL2.RDY_putFromMem && (! is_halted)
Blocking rules: (none)
 
Rule: sendToMem
Predicate: mainMem.RDY_put && cacheL2.RDY_getToMem && (! is_halted)
Blocking rules: (none)
 
Rule: getFromL2
Predicate: cacheL2.RDY_getToProc &&
	   (toL2RoundRobin
	    ? cacheI.RDY_putFromMem
	    : cacheD.RDY_putFromMem) &&
	   (! is_halted)
Blocking rules: sendReqInstr, sendReqData
 
Rule: sendToL2
Predicate: ((((! toL2RoundRobin) && iToL2_rv.port1__read[539]) ||
	     dToL2_rv.port1__read[539])
	    ? cacheL2.RDY_putFromProc
	    : ((! toL2RoundRobin) || (! iToL2_rv.port1__read[539]) ||
	       cacheL2.RDY_putFromProc)) &&
	   (! outstandingMiss) && (! is_halted)
Blocking rules: getFromL2, getFromMem
 
Rule: toL2Data
Predicate: cacheD.RDY_getToMem && (! dToL2_rv.port0__read[539]) &&
	   (! is_halted)
Blocking rules: (none)
 
Rule: toL2Instr
Predicate: cacheI.RDY_getToMem && (! iToL2_rv.port0__read[539]) &&
	   (! is_halted)
Blocking rules: (none)
 
Logical execution order: sendReqData,
			 sendReqInstr,
			 halted,
			 restarted,
			 request,
			 response,
			 getFromMem,
			 sendToMem,
			 getFromL2,
			 getRespData,
			 getRespInstr,
			 toL2Data,
			 toL2Instr,
			 sendToL2,
			 halt,
			 restart

================================================
